import 'examples/HPKE/KDF/KDF.primitive';

// A simplified KDF security definition 
// based on Krawczyk's security definition for KDFs in 
// "Cryptographic Extraction and Key Derivation: The HKDF Scheme".
// https://eprint.iacr.org/2010/264.pdf

Game Real(KDF F) {
    BitString seed;
    ? aux_knowledge;
    K.Salt r;
    
    Set<K.Context> C;
    Set<K.Context> CPrime;

    Int count;

    ? Initialize() {
        ikm <- BitString;
        r <- K.Salt;
        return aux_knowledge;
    }

    BitString? GetChallenge(K.Context c, Int length) {
        if (c in CPrime) { return None; }

        BitString? result = None;
        count = count + 1;
        if (count == 1) { 
            C = C union c;
            result = F.evaluate(ikm, r, c, length); 
        }
        return result;
    }

    BitString? Query(K.Context c, Int length) {
        if (c in C) { return None; }
        CPrime = CPrime union c;
        return F.evaluate(ikm, r, c, length);
    }
}

Game Random(KDF F) {
    Map<BitString<F.in>, BitString<F.out>> T;

    BitString<F.out> Lookup(BitString<F.in> x) {
        if (!(x in T)) {
            T[x] <- BitString<F.out>;
        }
        return T[x];
    }
}

export as Security;
