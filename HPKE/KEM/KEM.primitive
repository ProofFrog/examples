Primitive KEM(Set PublicKeySpace, Set PrivateKeySpace, Set SharedSecretSpace, int SharedSecretLength, int EncapKeyLength, int PublicKeyLength, int PrivateKeyLength) {
    Set PublicKey = PublicKeySpace;
    Set EncapKey = PublicKeySpace;
    Set PrivateKey = PrivateKeySpace;

    // Lengths of byte string encodings, maybe change to bitstrings?
    int Nsecret = SharedSecretLength;
    int Nenc = PublicKeyLength;
    int Npk = PublicKeyLength;
    int Nsk = PrivateKeyLength;

    Set SharedSecret = ByteString<Nsecret>;

    PrivateKey * PublicKey GenerateKeyPair();
    PrivateKey * PublicKey DeriveKeyPair(ByteString<Nsk> ikm); // ikm should be at least Nsk, don't think we can account for that

    Bytestring<Npk> SerializePublicKey(PublicKey pkX);
    PublicKey? DeserializePublicKey(Bytestring<Npk> pkXm);

    SharedSecret * EncapKey? Encap(PublicKey pkR); // TODO: add encap key
    SharedSecret? Decap(EncapKey enc, PrivateKey pkR);

    // TODO: Auth
    SharedSecret * EncapKey? AuthEncap(PublicKey pkR, PrivateKey skS); // TODO: add encap key
    SharedSecret? AuthDecap(EncapKey enc, PrivateKey skR, PublicKey pkS);
}