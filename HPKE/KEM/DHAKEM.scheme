import 'examples/Primitives/AKEM.primitive';
import 'examples/HPKE/KDF/KDF.primitive';
import 'examples/HPKE/KEM/DH.primitive';

// A Diffie-Hellman AKEM scheme.

Scheme DHAKEM(DH D, KDF F, Int SharedSecretLength) extends AKEM {
    Set SecretKey = D.SecretKey;
    Set PublicKey = D.PublicKey;
    Set Ciphertext = D.PublicKey;

    Int Nsecret = SharedSecretLength;
    Set SharedSecret = BitString<Nsecret>;

    // A simplified ExtractAndExpand method
    //SharedSecret ExtractAndExpand(D.SharedSecret * D.SharedSecret dh, PublicKey * PublicKey * PublicKey kemContext) {
    //    BitString ikm = D.Encode(dh[0]) || D.Encode(dh[1]);
    //    BitString info = D.Encode(Nsecret) || D.Encode(kemContext[0]) || D.Encode(kemContext[1]) || D.Encode(kemContext[2]);
    //    return F.evaluate(ikm, info);
    //}

    SecretKey * PublicKey KeyGen() {
        return D.KeyGen();
    }

    Ciphertext * SharedSecret AuthEncap(PublicKey pkR, SecretKey skS) {
        SecretKey * PublicKey ephemeralKey = D.KeyGen();
        SecretKey skE = ephemeralKey[0];
        PublicKey pkE = ephemeralKey[1];
        D.SharedSecret * D.SharedSecret dh = [D.GetSharedSecret(skE, pkR), D.GetSharedSecret(skS, pkR)];
        Ciphertext enc = pkE;

        PublicKey pkS = D.GetPublicKey(skS);
        PublicKey * PublicKey * PublicKey kemContext = [pkE, pkR, pkS];

        BitString ikm = D.Encode(dh[0]) || D.Encode(dh[1]);
        BitString info = D.Encode(Nsecret) || D.Encode(kemContext[0]) || D.Encode(kemContext[1]) || D.Encode(kemContext[2]);
        SharedSecret k = F.evaluate(ikm, info);

        return [enc, k];
    }

    SharedSecret AuthDecap(Ciphertext c, SecretKey skR, PublicKey pkS) {
        PublicKey pkE = c;
        D.SharedSecret * D.SharedSecret dh = [D.GetSharedSecret(skR, pkE), D.GetSharedSecret(skR, pkS)];

        PublicKey pkR = D.GetPublicKey(skR);
        PublicKey * PublicKey * PublicKey kemContext = [pkE, pkR, pkS];

        BitString ikm = D.Encode(dh[0]) || D.Encode(dh[1]);
        BitString info = D.Encode(Nsecret) || D.Encode(kemContext[0]) || D.Encode(kemContext[1]) || D.Encode(kemContext[2]);
        SharedSecret k = F.evaluate(ikm, info);

        return k;
    }
}
