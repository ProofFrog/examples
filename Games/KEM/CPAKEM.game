import 'examples/Primitives/KEM.primitive';

Game Left(KEM K) {
    K.PublicKey pk;
    K.SecretKey sk;

    K.PublicKey Initialize() {
        K.PublicKey * K.SecretKey k = K.KeyGen();
        pk = k[0];
        sk = k[1];
        return pk;
    }

    K.SharedSecret * K.Ciphertext Challenge() {
        K.SharedSecret * K.Ciphertext rsp = K.Encaps(pk);
        K.SharedSecret ss = rsp[0];
        K.Ciphertext ctxt = rsp[1];
        return [ss, ctxt];
    }
}

Game Right(KEM K) {
    K.PublicKey pk;
    K.SecretKey sk;

    K.PublicKey Initialize() {
        K.PublicKey * K.SecretKey k = K.KeyGen();
        pk = k[0];
        sk = k[1];
        return pk;
    }

    K.SharedSecret * K.Ciphertext Challenge() {
        K.SharedSecret * K.Ciphertext rsp = K.Encaps(pk);
        K.SharedSecret ss <- K.SharedSecret;
        K.Ciphertext ctxt = rsp[1];
        return [ss, ctxt];
    }
}

export as CPAKEM;
